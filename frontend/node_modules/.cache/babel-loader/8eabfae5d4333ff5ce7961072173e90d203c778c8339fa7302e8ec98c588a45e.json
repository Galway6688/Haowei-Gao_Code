{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8000/api',\n  timeout: 60000 // 60 seconds timeout for file uploads\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Multimodal Analysis APIs\nexport const multimodalAPI = {\n  // Tactile-Text Analysis\n  analyzeTactileText: async data => {\n    const response = await api.post('/multimodal/tactile-text', data);\n    return response.data;\n  },\n  // Vision-Text Analysis\n  analyzeVisionText: async formData => {\n    const response = await api.post('/multimodal/vision-text', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Complete Multimodal Analysis\n  analyzeComplete: async formData => {\n    const response = await api.post('/multimodal/multimodal-complete', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Few-Shot Learning\n  fewShotLearning: async formData => {\n    const response = await api.post('/multimodal/few-shot-learning', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get Available Templates\n  getAvailableTemplates: async () => {\n    const response = await api.get('/multimodal/available-templates');\n    return response.data;\n  },\n  // Create Custom Template\n  createCustomTemplate: async formData => {\n    const response = await api.post('/multimodal/custom-template', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get Model Info\n  getModelInfo: async () => {\n    const response = await api.get('/multimodal/model-info');\n    return response.data;\n  }\n};\n\n// Question Answering APIs\nexport const qaAPI = {\n  // Single Modality QA\n  askSingleModality: async data => {\n    const response = await api.post('/qa/single-modality', data);\n    return response.data;\n  },\n  // Dual Modality QA\n  askDualModality: async formData => {\n    const response = await api.post('/qa/dual-modality', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Multimodal QA\n  askMultimodal: async formData => {\n    const response = await api.post('/qa/multimodal-qa', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Contextual QA\n  askContextual: async formData => {\n    const response = await api.post('/qa/contextual-qa', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get Sample Questions\n  getSampleQuestions: async () => {\n    const response = await api.get('/qa/sample-questions');\n    return response.data;\n  },\n  // Batch QA\n  batchQA: async formData => {\n    const response = await api.post('/qa/batch-qa', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\n\n// Health Check\nexport const healthCheck = async () => {\n  const response = await api.get('/health');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","NODE_ENV","timeout","interceptors","request","use","config","error","Promise","reject","response","console","multimodalAPI","analyzeTactileText","data","post","analyzeVisionText","formData","headers","analyzeComplete","fewShotLearning","getAvailableTemplates","get","createCustomTemplate","getModelInfo","qaAPI","askSingleModality","askDualModality","askMultimodal","askContextual","getSampleQuestions","batchQA","healthCheck"],"sources":["E:/python project/Real new/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8000/api',\r\n  timeout: 60000, // 60 seconds timeout for file uploads\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Multimodal Analysis APIs\r\nexport const multimodalAPI = {\r\n  // Tactile-Text Analysis\r\n  analyzeTactileText: async (data) => {\r\n    const response = await api.post('/multimodal/tactile-text', data);\r\n    return response.data;\r\n  },\r\n\r\n  // Vision-Text Analysis\r\n  analyzeVisionText: async (formData) => {\r\n    const response = await api.post('/multimodal/vision-text', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Complete Multimodal Analysis\r\n  analyzeComplete: async (formData) => {\r\n    const response = await api.post('/multimodal/multimodal-complete', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Few-Shot Learning\r\n  fewShotLearning: async (formData) => {\r\n    const response = await api.post('/multimodal/few-shot-learning', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get Available Templates\r\n  getAvailableTemplates: async () => {\r\n    const response = await api.get('/multimodal/available-templates');\r\n    return response.data;\r\n  },\r\n\r\n  // Create Custom Template\r\n  createCustomTemplate: async (formData) => {\r\n    const response = await api.post('/multimodal/custom-template', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get Model Info\r\n  getModelInfo: async () => {\r\n    const response = await api.get('/multimodal/model-info');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Question Answering APIs\r\nexport const qaAPI = {\r\n  // Single Modality QA\r\n  askSingleModality: async (data) => {\r\n    const response = await api.post('/qa/single-modality', data);\r\n    return response.data;\r\n  },\r\n\r\n  // Dual Modality QA\r\n  askDualModality: async (formData) => {\r\n    const response = await api.post('/qa/dual-modality', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Multimodal QA\r\n  askMultimodal: async (formData) => {\r\n    const response = await api.post('/qa/multimodal-qa', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Contextual QA\r\n  askContextual: async (formData) => {\r\n    const response = await api.post('/qa/contextual-qa', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get Sample Questions\r\n  getSampleQuestions: async () => {\r\n    const response = await api.get('/qa/sample-questions');\r\n    return response.data;\r\n  },\r\n\r\n  // Batch QA\r\n  batchQA: async (formData) => {\r\n    const response = await api.post('/qa/batch-qa', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health Check\r\nexport const healthCheck = async () => {\r\n  const response = await api.get('/health');\r\n  return response.data;\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,MAAM,GAAG,2BAA2B;EACrFC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACO,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTI,OAAO,CAACJ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMK,aAAa,GAAG;EAC3B;EACAC,kBAAkB,EAAE,MAAOC,IAAI,IAAK;IAClC,MAAMJ,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,0BAA0B,EAAED,IAAI,CAAC;IACjE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAE,iBAAiB,EAAE,MAAOC,QAAQ,IAAK;IACrC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,yBAAyB,EAAEE,QAAQ,EAAE;MACnEC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAK,eAAe,EAAE,MAAOF,QAAQ,IAAK;IACnC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,iCAAiC,EAAEE,QAAQ,EAAE;MAC3EC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAM,eAAe,EAAE,MAAOH,QAAQ,IAAK;IACnC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,+BAA+B,EAAEE,QAAQ,EAAE;MACzEC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAO,qBAAqB,EAAE,MAAAA,CAAA,KAAY;IACjC,MAAMX,QAAQ,GAAG,MAAMd,GAAG,CAAC0B,GAAG,CAAC,iCAAiC,CAAC;IACjE,OAAOZ,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAS,oBAAoB,EAAE,MAAON,QAAQ,IAAK;IACxC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,6BAA6B,EAAEE,QAAQ,EAAE;MACvEC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAU,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMd,QAAQ,GAAG,MAAMd,GAAG,CAAC0B,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOZ,QAAQ,CAACI,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,KAAK,GAAG;EACnB;EACAC,iBAAiB,EAAE,MAAOZ,IAAI,IAAK;IACjC,MAAMJ,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,qBAAqB,EAAED,IAAI,CAAC;IAC5D,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAa,eAAe,EAAE,MAAOV,QAAQ,IAAK;IACnC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,mBAAmB,EAAEE,QAAQ,EAAE;MAC7DC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAc,aAAa,EAAE,MAAOX,QAAQ,IAAK;IACjC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,mBAAmB,EAAEE,QAAQ,EAAE;MAC7DC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAe,aAAa,EAAE,MAAOZ,QAAQ,IAAK;IACjC,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,mBAAmB,EAAEE,QAAQ,EAAE;MAC7DC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAgB,kBAAkB,EAAE,MAAAA,CAAA,KAAY;IAC9B,MAAMpB,QAAQ,GAAG,MAAMd,GAAG,CAAC0B,GAAG,CAAC,sBAAsB,CAAC;IACtD,OAAOZ,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAiB,OAAO,EAAE,MAAOd,QAAQ,IAAK;IAC3B,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACmB,IAAI,CAAC,cAAc,EAAEE,QAAQ,EAAE;MACxDC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACI,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMtB,QAAQ,GAAG,MAAMd,GAAG,CAAC0B,GAAG,CAAC,SAAS,CAAC;EACzC,OAAOZ,QAAQ,CAACI,IAAI;AACtB,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}