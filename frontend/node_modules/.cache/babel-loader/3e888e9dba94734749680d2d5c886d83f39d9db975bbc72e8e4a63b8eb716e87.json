{"ast":null,"code":"import axios from 'axios';\n\n// API 基础配置\nconst API_BASE_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : window.location.origin;\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000 // 60 seconds timeout for AI processing\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 可以在这里添加认证token等\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    return Promise.reject(error.response.data);\n  }\n  return Promise.reject({\n    error: error.message\n  });\n});\n\n// 多模态分析 API\nexport const multimodalAPI = {\n  // 统一的多模态分析端点\n  processUnifiedAnalysis: async formData => {\n    try {\n      const response = await api.post('/api/multimodal/unified-analysis', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 触觉-文本分析\n  processTactileText: async data => {\n    try {\n      const response = await api.post('/api/multimodal/tactile-text', data);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 视觉-文本分析\n  processVisionText: async formData => {\n    try {\n      const response = await api.post('/api/multimodal/vision-text', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 完整多模态分析\n  processMultimodalComplete: async formData => {\n    try {\n      const response = await api.post('/api/multimodal/multimodal-complete', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 少样本学习\n  processFewShotLearning: async data => {\n    try {\n      const response = await api.post('/api/multimodal/few-shot-learning', data);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 获取可用模板\n  getAvailableTemplates: async () => {\n    try {\n      const response = await api.get('/api/multimodal/available-templates');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 添加自定义模板\n  addCustomTemplate: async data => {\n    try {\n      const response = await api.post('/api/multimodal/custom-template', data);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 获取模型信息\n  getModelInfo: async () => {\n    try {\n      const response = await api.get('/api/multimodal/model-info');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// 问答系统 API\nexport const qaAPI = {\n  // 单模态问答\n  processSingleModality: async data => {\n    try {\n      const response = await api.post('/api/qa/single-modality', data);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 双模态问答\n  processDualModality: async formData => {\n    try {\n      const response = await api.post('/api/qa/dual-modality', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 多模态问答\n  processMultimodalQA: async formData => {\n    try {\n      const response = await api.post('/api/qa/multimodal-qa', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 上下文问答\n  processContextualQA: async data => {\n    try {\n      const response = await api.post('/api/qa/contextual-qa', data);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 获取样本问题\n  getSampleQuestions: async () => {\n    try {\n      const response = await api.get('/api/qa/sample-questions');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // 批量问答\n  processBatchQA: async data => {\n    try {\n      const response = await api.post('/api/qa/batch-qa', data);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","window","location","origin","api","create","baseURL","timeout","interceptors","request","use","config","error","Promise","reject","response","data","console","message","multimodalAPI","processUnifiedAnalysis","formData","post","headers","processTactileText","processVisionText","processMultimodalComplete","processFewShotLearning","getAvailableTemplates","get","addCustomTemplate","getModelInfo","qaAPI","processSingleModality","processDualModality","processMultimodalQA","processContextualQA","getSampleQuestions","processBatchQA"],"sources":["E:/python project/Real new/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API 基础配置\r\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \r\n  ? 'http://localhost:8000' \r\n  : window.location.origin;\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000, // 60 seconds timeout for AI processing\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 可以在这里添加认证token等\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response.data;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    if (error.response) {\r\n      return Promise.reject(error.response.data);\r\n    }\r\n    return Promise.reject({ error: error.message });\r\n  }\r\n);\r\n\r\n// 多模态分析 API\r\nexport const multimodalAPI = {\r\n  // 统一的多模态分析端点\r\n  processUnifiedAnalysis: async (formData) => {\r\n    try {\r\n      const response = await api.post('/api/multimodal/unified-analysis', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 触觉-文本分析\r\n  processTactileText: async (data) => {\r\n    try {\r\n      const response = await api.post('/api/multimodal/tactile-text', data);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 视觉-文本分析\r\n  processVisionText: async (formData) => {\r\n    try {\r\n      const response = await api.post('/api/multimodal/vision-text', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 完整多模态分析\r\n  processMultimodalComplete: async (formData) => {\r\n    try {\r\n      const response = await api.post('/api/multimodal/multimodal-complete', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 少样本学习\r\n  processFewShotLearning: async (data) => {\r\n    try {\r\n      const response = await api.post('/api/multimodal/few-shot-learning', data);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 获取可用模板\r\n  getAvailableTemplates: async () => {\r\n    try {\r\n      const response = await api.get('/api/multimodal/available-templates');\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 添加自定义模板\r\n  addCustomTemplate: async (data) => {\r\n    try {\r\n      const response = await api.post('/api/multimodal/custom-template', data);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 获取模型信息\r\n  getModelInfo: async () => {\r\n    try {\r\n      const response = await api.get('/api/multimodal/model-info');\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// 问答系统 API\r\nexport const qaAPI = {\r\n  // 单模态问答\r\n  processSingleModality: async (data) => {\r\n    try {\r\n      const response = await api.post('/api/qa/single-modality', data);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 双模态问答\r\n  processDualModality: async (formData) => {\r\n    try {\r\n      const response = await api.post('/api/qa/dual-modality', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 多模态问答\r\n  processMultimodalQA: async (formData) => {\r\n    try {\r\n      const response = await api.post('/api/qa/multimodal-qa', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 上下文问答\r\n  processContextualQA: async (data) => {\r\n    try {\r\n      const response = await api.post('/api/qa/contextual-qa', data);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 获取样本问题\r\n  getSampleQuestions: async () => {\r\n    try {\r\n      const response = await api.get('/api/qa/sample-questions');\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 批量问答\r\n  processBatchQA: async (data) => {\r\n    try {\r\n      const response = await api.post('/api/qa/batch-qa', data);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}