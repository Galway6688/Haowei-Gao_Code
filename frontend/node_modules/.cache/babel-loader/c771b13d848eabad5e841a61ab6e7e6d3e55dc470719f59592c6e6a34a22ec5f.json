{"ast":null,"code":"var _jsxFileName = \"E:\\\\python project\\\\Real new\\\\frontend\\\\src\\\\components\\\\QuestionAnswering.js\",\n  _s3 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle, faSearch, faCommentAlt, faLightbulb } from '@fortawesome/free-solid-svg-icons';\nimport { qaAPI } from '../services/api';\nimport InputField from './common/InputField';\nimport FileUpload from './common/FileUpload';\nimport Button from './common/Button';\nimport ResultsDisplay from './common/ResultsDisplay';\nimport ModeSelector from './common/ModeSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div``;\n_c = Container;\nconst SectionHeader = styled.div`\n  text-align: center;\n  margin-bottom: 30px;\n  \n  h2 {\n    font-size: 2rem;\n    color: #2c3e50;\n    margin-bottom: 10px;\n    \n    .icon {\n      color: #9b59b6;\n      margin-right: 10px;\n    }\n  }\n  \n  p {\n    color: #7f8c8d;\n    font-size: 1.1rem;\n  }\n`;\n_c2 = SectionHeader;\nconst QAForm = styled.div`\n  display: ${props => props.active ? 'block' : 'none'};\n`;\n_c3 = QAForm;\nconst InputGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n_c4 = InputGrid;\nconst SampleQuestions = styled.div`\n  margin-top: 30px;\n  padding: 25px;\n  background: #f8f9fa;\n  border-radius: 10px;\n  \n  h4 {\n    color: #2c3e50;\n    margin-bottom: 15px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    \n    .icon {\n      color: #9b59b6;\n    }\n  }\n`;\n_c5 = SampleQuestions;\nconst ExampleButton = styled.button`\n  background: #3498db;\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  font-size: 0.9rem;\n  text-align: left;\n  border-radius: 5px;\n  margin: 5px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: block;\n  width: 100%;\n  \n  &:hover {\n    background: #2980b9;\n    transform: translateY(-1px);\n  }\n`;\n_c6 = ExampleButton;\nconst QuestionAnswering = ({\n  setIsLoading\n}) => {\n  _s3();\n  const [activeMode, setActiveMode] = useState('single-qa');\n  const [formData, setFormData] = useState({\n    question: '',\n    modalityType: 'tactile',\n    modalityData: '',\n    tactileData: '',\n    textData: '',\n    imageFile: null\n  });\n  const [results, setResults] = useState(null);\n  const [sampleQuestions, setSampleQuestions] = useState(null);\n  const modes = [{\n    id: 'single-qa',\n    label: 'Single Modality'\n  }, {\n    id: 'dual-qa',\n    label: 'Dual Modality'\n  }, {\n    id: 'multi-qa',\n    label: 'All Modalities'\n  }, {\n    id: 'batch-qa',\n    label: 'Batch Questions'\n  }];\n  const modalityOptions = [{\n    value: 'tactile',\n    label: 'Tactile'\n  }, {\n    value: 'vision',\n    label: 'Vision'\n  }, {\n    value: 'text',\n    label: 'Text'\n  }];\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const handleFileChange = file => {\n    setFormData(prev => ({\n      ...prev,\n      imageFile: file\n    }));\n  };\n  const validateForm = () => {\n    switch (activeMode) {\n      case 'single-qa':\n        if (!formData.question || !formData.modalityData) {\n          toast.error('Please fill in all required fields');\n          return false;\n        }\n        break;\n      case 'dual-qa':\n      case 'multi-qa':\n        if (!formData.question) {\n          toast.error('Please enter a question');\n          return false;\n        }\n        if (!formData.tactileData && !formData.textData && !formData.imageFile) {\n          toast.error('Please provide at least one type of data');\n          return false;\n        }\n        break;\n      default:\n        return false;\n    }\n    return true;\n  };\n  const handleAskQuestion = async () => {\n    if (!validateForm()) return;\n    setIsLoading(true);\n    try {\n      let result;\n      switch (activeMode) {\n        case 'single-qa':\n          result = await qaAPI.askSingleModality({\n            question: formData.question,\n            modality_type: formData.modalityType,\n            modality_data: formData.modalityData\n          });\n          break;\n        case 'dual-qa':\n          const dualFormData = new FormData();\n          dualFormData.append('question', formData.question);\n          if (formData.tactileData) dualFormData.append('tactile_data', formData.tactileData);\n          if (formData.textData) dualFormData.append('text_data', formData.textData);\n          if (formData.imageFile) dualFormData.append('image', formData.imageFile);\n          result = await qaAPI.askDualModality(dualFormData);\n          break;\n        case 'multi-qa':\n          const multiFormData = new FormData();\n          multiFormData.append('question', formData.question);\n          multiFormData.append('tactile_data', formData.tactileData);\n          multiFormData.append('text_data', formData.textData);\n          multiFormData.append('image', formData.imageFile);\n          result = await qaAPI.askMultimodal(multiFormData);\n          break;\n        default:\n          throw new Error('Invalid QA mode');\n      }\n      if (result.success) {\n        setResults(result);\n        toast.success('Question answered successfully!');\n      } else {\n        toast.error(`Question answering failed: ${result.error || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('QA error:', error);\n      toast.error(`Error processing request: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadSampleQuestions = async () => {\n    try {\n      const result = await qaAPI.getSampleQuestions();\n      if (result.success) {\n        setSampleQuestions(result.sample_questions);\n        toast.info('Sample questions loaded!');\n      }\n    } catch (error) {\n      console.error('Error loading sample questions:', error);\n      toast.error('Failed to load sample questions');\n    }\n  };\n  const useSampleQuestion = question => {\n    setFormData(prev => ({\n      ...prev,\n      question: question\n    }));\n  };\n  const renderSingleModalityQA = () => /*#__PURE__*/_jsxDEV(QAForm, {\n    active: activeMode === 'single-qa',\n    children: [/*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Question\",\n      icon: faQuestionCircle,\n      value: formData.question,\n      onChange: value => handleInputChange('question', value),\n      placeholder: \"Ask a question about the data...\",\n      multiline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Modality Type\",\n      value: formData.modalityType,\n      onChange: value => handleInputChange('modalityType', value),\n      options: modalityOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Data\",\n      value: formData.modalityData,\n      onChange: value => handleInputChange('modalityData', value),\n      placeholder: \"Enter the data for the selected modality...\",\n      multiline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleAskQuestion,\n      icon: faSearch,\n      children: \"Ask Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n  const renderDualModalityQA = () => /*#__PURE__*/_jsxDEV(QAForm, {\n    active: activeMode === 'dual-qa',\n    children: [/*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Question\",\n      icon: faQuestionCircle,\n      value: formData.question,\n      onChange: value => handleInputChange('question', value),\n      placeholder: \"Ask a question using multiple modalities...\",\n      multiline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputGrid, {\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Tactile Data (Optional)\",\n        value: formData.tactileData,\n        onChange: value => handleInputChange('tactileData', value),\n        placeholder: \"Tactile information...\",\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Text Data (Optional)\",\n        value: formData.textData,\n        onChange: value => handleInputChange('textData', value),\n        placeholder: \"Text information...\",\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n        label: \"Image (Optional)\",\n        onFileChange: handleFileChange,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleAskQuestion,\n      icon: faSearch,\n      children: \"Ask Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n  const renderMultiModalityQA = () => /*#__PURE__*/_jsxDEV(QAForm, {\n    active: activeMode === 'multi-qa',\n    children: [/*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Question\",\n      icon: faQuestionCircle,\n      value: formData.question,\n      onChange: value => handleInputChange('question', value),\n      placeholder: \"Ask a comprehensive question using all modalities...\",\n      multiline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputGrid, {\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Tactile Data\",\n        value: formData.tactileData,\n        onChange: value => handleInputChange('tactileData', value),\n        placeholder: \"Tactile information...\",\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Text Data\",\n        value: formData.textData,\n        onChange: value => handleInputChange('textData', value),\n        placeholder: \"Text information...\",\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n        label: \"Upload Image\",\n        onFileChange: handleFileChange,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleAskQuestion,\n      icon: faSearch,\n      variant: \"primary\",\n      children: \"Ask Comprehensive Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n  const renderSampleQuestions = () => {\n    if (!sampleQuestions) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.entries(sampleQuestions.single_modality).map(([modality, questions]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [modality.charAt(0).toUpperCase() + modality.slice(1), \" Questions:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), questions.map((question, index) => {\n          var _s = $RefreshSig$();\n          return /*#__PURE__*/_jsxDEV(ExampleButton, {\n            onClick: _s(() => {\n              _s();\n              useSampleQuestion(question);\n              if (activeMode === 'single-qa') {\n                setFormData(prev => ({\n                  ...prev,\n                  modalityType: modality\n                }));\n              }\n            }, \"ANXCrM6kRECm6cvo6OVqwlvcv2w=\", false, function () {\n              return [useSampleQuestion];\n            }),\n            children: question\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this);\n        })]\n      }, modality, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Dual Modality Questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), sampleQuestions.dual_modality.map((question, index) => {\n          var _s2 = $RefreshSig$();\n          return /*#__PURE__*/_jsxDEV(ExampleButton, {\n            onClick: _s2(() => {\n              _s2();\n              return useSampleQuestion(question);\n            }, \"ANXCrM6kRECm6cvo6OVqwlvcv2w=\", false, function () {\n              return [useSampleQuestion];\n            }),\n            children: question\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faQuestionCircle,\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), \"Question Answering\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ask questions about multimodal data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModeSelector, {\n      modes: modes,\n      activeMode: activeMode,\n      onModeChange: setActiveMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), renderSingleModalityQA(), renderDualModalityQA(), renderMultiModalityQA(), /*#__PURE__*/_jsxDEV(SampleQuestions, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faLightbulb,\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), \"Sample Questions\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), !sampleQuestions ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: loadSampleQuestions,\n        variant: \"secondary\",\n        size: \"small\",\n        children: \"Load Sample Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this) : renderSampleQuestions()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), results && /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      title: \"Answer\",\n      icon: faCommentAlt,\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n};\n_s3(QuestionAnswering, \"OW/hK6gUX2+rfXnYpOBDnMoSDlg=\");\n_c7 = QuestionAnswering;\nexport default QuestionAnswering;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"SectionHeader\");\n$RefreshReg$(_c3, \"QAForm\");\n$RefreshReg$(_c4, \"InputGrid\");\n$RefreshReg$(_c5, \"SampleQuestions\");\n$RefreshReg$(_c6, \"ExampleButton\");\n$RefreshReg$(_c7, \"QuestionAnswering\");","map":{"version":3,"names":["React","useState","styled","toast","FontAwesomeIcon","faQuestionCircle","faSearch","faCommentAlt","faLightbulb","qaAPI","InputField","FileUpload","Button","ResultsDisplay","ModeSelector","jsxDEV","_jsxDEV","Container","div","_c","SectionHeader","_c2","QAForm","props","active","_c3","InputGrid","_c4","SampleQuestions","_c5","ExampleButton","button","_c6","QuestionAnswering","setIsLoading","_s3","activeMode","setActiveMode","formData","setFormData","question","modalityType","modalityData","tactileData","textData","imageFile","results","setResults","sampleQuestions","setSampleQuestions","modes","id","label","modalityOptions","value","handleInputChange","field","prev","handleFileChange","file","validateForm","error","handleAskQuestion","result","askSingleModality","modality_type","modality_data","dualFormData","FormData","append","askDualModality","multiFormData","askMultimodal","Error","success","console","message","loadSampleQuestions","getSampleQuestions","sample_questions","info","useSampleQuestion","renderSingleModalityQA","children","icon","onChange","placeholder","multiline","fileName","_jsxFileName","lineNumber","columnNumber","options","onClick","renderDualModalityQA","onFileChange","accept","renderMultiModalityQA","variant","renderSampleQuestions","Object","entries","single_modality","map","modality","questions","charAt","toUpperCase","slice","index","_s","$RefreshSig$","dual_modality","_s2","className","onModeChange","size","title","_c7","$RefreshReg$"],"sources":["E:/python project/Real new/frontend/src/components/QuestionAnswering.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n  faQuestionCircle, \r\n  faSearch, \r\n  faCommentAlt,\r\n  faLightbulb \r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { qaAPI } from '../services/api';\r\nimport InputField from './common/InputField';\r\nimport FileUpload from './common/FileUpload';\r\nimport Button from './common/Button';\r\nimport ResultsDisplay from './common/ResultsDisplay';\r\nimport ModeSelector from './common/ModeSelector';\r\n\r\nconst Container = styled.div``;\r\n\r\nconst SectionHeader = styled.div`\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n  \r\n  h2 {\r\n    font-size: 2rem;\r\n    color: #2c3e50;\r\n    margin-bottom: 10px;\r\n    \r\n    .icon {\r\n      color: #9b59b6;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n  \r\n  p {\r\n    color: #7f8c8d;\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\n\r\nconst QAForm = styled.div`\r\n  display: ${props => props.active ? 'block' : 'none'};\r\n`;\r\n\r\nconst InputGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst SampleQuestions = styled.div`\r\n  margin-top: 30px;\r\n  padding: 25px;\r\n  background: #f8f9fa;\r\n  border-radius: 10px;\r\n  \r\n  h4 {\r\n    color: #2c3e50;\r\n    margin-bottom: 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    \r\n    .icon {\r\n      color: #9b59b6;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ExampleButton = styled.button`\r\n  background: #3498db;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 15px;\r\n  font-size: 0.9rem;\r\n  text-align: left;\r\n  border-radius: 5px;\r\n  margin: 5px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  display: block;\r\n  width: 100%;\r\n  \r\n  &:hover {\r\n    background: #2980b9;\r\n    transform: translateY(-1px);\r\n  }\r\n`;\r\n\r\nconst QuestionAnswering = ({ setIsLoading }) => {\r\n  const [activeMode, setActiveMode] = useState('single-qa');\r\n  const [formData, setFormData] = useState({\r\n    question: '',\r\n    modalityType: 'tactile',\r\n    modalityData: '',\r\n    tactileData: '',\r\n    textData: '',\r\n    imageFile: null\r\n  });\r\n  const [results, setResults] = useState(null);\r\n  const [sampleQuestions, setSampleQuestions] = useState(null);\r\n\r\n  const modes = [\r\n    { id: 'single-qa', label: 'Single Modality' },\r\n    { id: 'dual-qa', label: 'Dual Modality' },\r\n    { id: 'multi-qa', label: 'All Modalities' },\r\n    { id: 'batch-qa', label: 'Batch Questions' }\r\n  ];\r\n\r\n  const modalityOptions = [\r\n    { value: 'tactile', label: 'Tactile' },\r\n    { value: 'vision', label: 'Vision' },\r\n    { value: 'text', label: 'Text' }\r\n  ];\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleFileChange = (file) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      imageFile: file\r\n    }));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    switch (activeMode) {\r\n      case 'single-qa':\r\n        if (!formData.question || !formData.modalityData) {\r\n          toast.error('Please fill in all required fields');\r\n          return false;\r\n        }\r\n        break;\r\n      case 'dual-qa':\r\n      case 'multi-qa':\r\n        if (!formData.question) {\r\n          toast.error('Please enter a question');\r\n          return false;\r\n        }\r\n        if (!formData.tactileData && !formData.textData && !formData.imageFile) {\r\n          toast.error('Please provide at least one type of data');\r\n          return false;\r\n        }\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleAskQuestion = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      let result;\r\n\r\n      switch (activeMode) {\r\n        case 'single-qa':\r\n          result = await qaAPI.askSingleModality({\r\n            question: formData.question,\r\n            modality_type: formData.modalityType,\r\n            modality_data: formData.modalityData\r\n          });\r\n          break;\r\n\r\n        case 'dual-qa':\r\n          const dualFormData = new FormData();\r\n          dualFormData.append('question', formData.question);\r\n          if (formData.tactileData) dualFormData.append('tactile_data', formData.tactileData);\r\n          if (formData.textData) dualFormData.append('text_data', formData.textData);\r\n          if (formData.imageFile) dualFormData.append('image', formData.imageFile);\r\n          result = await qaAPI.askDualModality(dualFormData);\r\n          break;\r\n\r\n        case 'multi-qa':\r\n          const multiFormData = new FormData();\r\n          multiFormData.append('question', formData.question);\r\n          multiFormData.append('tactile_data', formData.tactileData);\r\n          multiFormData.append('text_data', formData.textData);\r\n          multiFormData.append('image', formData.imageFile);\r\n          result = await qaAPI.askMultimodal(multiFormData);\r\n          break;\r\n\r\n        default:\r\n          throw new Error('Invalid QA mode');\r\n      }\r\n\r\n      if (result.success) {\r\n        setResults(result);\r\n        toast.success('Question answered successfully!');\r\n      } else {\r\n        toast.error(`Question answering failed: ${result.error || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('QA error:', error);\r\n      toast.error(`Error processing request: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadSampleQuestions = async () => {\r\n    try {\r\n      const result = await qaAPI.getSampleQuestions();\r\n      if (result.success) {\r\n        setSampleQuestions(result.sample_questions);\r\n        toast.info('Sample questions loaded!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading sample questions:', error);\r\n      toast.error('Failed to load sample questions');\r\n    }\r\n  };\r\n\r\n  const useSampleQuestion = (question) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      question: question\r\n    }));\r\n  };\r\n\r\n  const renderSingleModalityQA = () => (\r\n    <QAForm active={activeMode === 'single-qa'}>\r\n      <InputField\r\n        label=\"Question\"\r\n        icon={faQuestionCircle}\r\n        value={formData.question}\r\n        onChange={(value) => handleInputChange('question', value)}\r\n        placeholder=\"Ask a question about the data...\"\r\n        multiline\r\n      />\r\n      <InputField\r\n        label=\"Modality Type\"\r\n        value={formData.modalityType}\r\n        onChange={(value) => handleInputChange('modalityType', value)}\r\n        options={modalityOptions}\r\n      />\r\n      <InputField\r\n        label=\"Data\"\r\n        value={formData.modalityData}\r\n        onChange={(value) => handleInputChange('modalityData', value)}\r\n        placeholder=\"Enter the data for the selected modality...\"\r\n        multiline\r\n      />\r\n      <Button onClick={handleAskQuestion} icon={faSearch}>\r\n        Ask Question\r\n      </Button>\r\n    </QAForm>\r\n  );\r\n\r\n  const renderDualModalityQA = () => (\r\n    <QAForm active={activeMode === 'dual-qa'}>\r\n      <InputField\r\n        label=\"Question\"\r\n        icon={faQuestionCircle}\r\n        value={formData.question}\r\n        onChange={(value) => handleInputChange('question', value)}\r\n        placeholder=\"Ask a question using multiple modalities...\"\r\n        multiline\r\n      />\r\n      <InputGrid>\r\n        <InputField\r\n          label=\"Tactile Data (Optional)\"\r\n          value={formData.tactileData}\r\n          onChange={(value) => handleInputChange('tactileData', value)}\r\n          placeholder=\"Tactile information...\"\r\n          multiline\r\n        />\r\n        <InputField\r\n          label=\"Text Data (Optional)\"\r\n          value={formData.textData}\r\n          onChange={(value) => handleInputChange('textData', value)}\r\n          placeholder=\"Text information...\"\r\n          multiline\r\n        />\r\n        <FileUpload\r\n          label=\"Image (Optional)\"\r\n          onFileChange={handleFileChange}\r\n          accept=\"image/*\"\r\n        />\r\n      </InputGrid>\r\n      <Button onClick={handleAskQuestion} icon={faSearch}>\r\n        Ask Question\r\n      </Button>\r\n    </QAForm>\r\n  );\r\n\r\n  const renderMultiModalityQA = () => (\r\n    <QAForm active={activeMode === 'multi-qa'}>\r\n      <InputField\r\n        label=\"Question\"\r\n        icon={faQuestionCircle}\r\n        value={formData.question}\r\n        onChange={(value) => handleInputChange('question', value)}\r\n        placeholder=\"Ask a comprehensive question using all modalities...\"\r\n        multiline\r\n      />\r\n      <InputGrid>\r\n        <InputField\r\n          label=\"Tactile Data\"\r\n          value={formData.tactileData}\r\n          onChange={(value) => handleInputChange('tactileData', value)}\r\n          placeholder=\"Tactile information...\"\r\n          multiline\r\n        />\r\n        <InputField\r\n          label=\"Text Data\"\r\n          value={formData.textData}\r\n          onChange={(value) => handleInputChange('textData', value)}\r\n          placeholder=\"Text information...\"\r\n          multiline\r\n        />\r\n        <FileUpload\r\n          label=\"Upload Image\"\r\n          onFileChange={handleFileChange}\r\n          accept=\"image/*\"\r\n        />\r\n      </InputGrid>\r\n      <Button onClick={handleAskQuestion} icon={faSearch} variant=\"primary\">\r\n        Ask Comprehensive Question\r\n      </Button>\r\n    </QAForm>\r\n  );\r\n\r\n  const renderSampleQuestions = () => {\r\n    if (!sampleQuestions) return null;\r\n\r\n    return (\r\n      <div>\r\n        {/* Single modality questions */}\r\n        {Object.entries(sampleQuestions.single_modality).map(([modality, questions]) => (\r\n          <div key={modality}>\r\n            <h5>{modality.charAt(0).toUpperCase() + modality.slice(1)} Questions:</h5>\r\n            {questions.map((question, index) => (\r\n              <ExampleButton\r\n                key={index}\r\n                onClick={() => {\r\n                  useSampleQuestion(question);\r\n                  if (activeMode === 'single-qa') {\r\n                    setFormData(prev => ({ ...prev, modalityType: modality }));\r\n                  }\r\n                }}\r\n              >\r\n                {question}\r\n              </ExampleButton>\r\n            ))}\r\n          </div>\r\n        ))}\r\n\r\n        {/* Dual modality questions */}\r\n        <div>\r\n          <h5>Dual Modality Questions:</h5>\r\n          {sampleQuestions.dual_modality.map((question, index) => (\r\n            <ExampleButton\r\n              key={index}\r\n              onClick={() => useSampleQuestion(question)}\r\n            >\r\n              {question}\r\n            </ExampleButton>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <SectionHeader>\r\n        <h2>\r\n          <FontAwesomeIcon icon={faQuestionCircle} className=\"icon\" />\r\n          Question Answering\r\n        </h2>\r\n        <p>Ask questions about multimodal data</p>\r\n      </SectionHeader>\r\n\r\n      <ModeSelector\r\n        modes={modes}\r\n        activeMode={activeMode}\r\n        onModeChange={setActiveMode}\r\n      />\r\n\r\n      {renderSingleModalityQA()}\r\n      {renderDualModalityQA()}\r\n      {renderMultiModalityQA()}\r\n\r\n      <SampleQuestions>\r\n        <h4>\r\n          <FontAwesomeIcon icon={faLightbulb} className=\"icon\" />\r\n          Sample Questions\r\n        </h4>\r\n        {!sampleQuestions ? (\r\n          <Button onClick={loadSampleQuestions} variant=\"secondary\" size=\"small\">\r\n            Load Sample Questions\r\n          </Button>\r\n        ) : (\r\n          renderSampleQuestions()\r\n        )}\r\n      </SampleQuestions>\r\n\r\n      {results && (\r\n        <ResultsDisplay\r\n          title=\"Answer\"\r\n          icon={faCommentAlt}\r\n          results={results}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionAnswering; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}